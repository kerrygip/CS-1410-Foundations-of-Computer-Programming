TRUE/FALSE


1. A simple decision can be implemented with an if statement.
 - T
 
2. In Python conditions, (not equal) is written as /=.
 - F !=


3. Strings are compared by lexicographic ordering.
 - T : lexicographic = alphabetical
 
4. A two-way decision is implemented using an if- elif statement.
 - F - just if/else. If more than 2 than if/ elif/ .. /else

5. The math . sqrt function cannot compute the square root of a negative
number.
 - F 

6. A single try statement can catch multiple kinds of errors.
  - F - just 1

7. Multi-way decisions must be handled by nesting multiple if- else statements.
 - F - can be done whowever it makes sense

8. There is usually only one correct solution to a problem involving decision
structures.
 - F- the world is your oyster

9. The condition x <= y <= z is allowed in Python.
 - T
 
10. Input validation means prompting a user when input is required
 - F  Input validation refers to the process of verifying that a users input will work in the program. 
 Some input validation can take place with a try-except statement. (p. 216-218, 252)
 
 
 
 
 MULTIPLE CHOICE
 
1. A statement that controls the execution of other statements is called a
C- Control Structire 


2. The best structure for implementing a multi-way decision in Python is

C - if - elif - else

3. An expression that evaluates to either true or false is called
B- boolean


4. When a program is being run directly (not imported), the value of __name __ IS
C - __main__


5. The literals for type b ool are
B- True False

6. Placing a decision inside of another decision is an example of
C - nested 


7. In Python, the body of a decision is indicated by
A- indendation 

8. A structure in which one decision leads to another set of decisions, which
leads to another set of decisions, etc., is called a decision
C- Tree

9. Taking the square root of a negative value with math . sqrt produces a(n)
A- ValueError

10. A multiple choice question is most similar to
C - multi way decision 





DISCUSSION 



1. Explain the following patterns in your own words:
a) simple decision - one option
b) two-way decision - two options
c) multi-way decision - many options

2. How is exception handling using try/except similar to and different from
handling exceptional cases using ordinary decision structures (variations
on if)?
You can find out what specific errors arise, but I'd prefer to not use exception handling. 

3. The following is a (silly) decision structure:
a, b, c = eval( input('Enter three numbers : ')) 
if a > b:
  if b > c:
    print("Spam Please!" )
  else :
    print("It's a late parrot!" )
elif b > c:
  print("Cheese Shopper" )
  if a >= c:
    print("Cheddar" )
  elif a < b:
    print ("Gouda" )
  elif c == b:
    print("Swiss")
  else :
    print("Trees")
if a == b:
  print("Chestnut" )
else :
  print ("Lauch")
  print ("Done" )
Show the output that would result from each of the following possible
inputs:
a) 3, 4, 5 - launch done
b) 3, 3, 3 - chestnut
c) 5, 4, 3 - spam please! lunch done 
d) 3, 5, 2 - cheese shopper cheddar launch done
e) 5, 4, 7 - its a late parrot launch done 
f) 3, 3, 2 - cheese shopper cheddar chestnut 



PROGRAMMING EXERCISES

1. Many companies pay time-and-a-half for any hours worked above 40 in a
given week. Write a program to input the number of hours worked and
the hourly rate and calculate the total wages for the week.

 hours = eval(input("How many hours have you worked?: "))
rate = eval(input("How much do you get paid per hour?: "))

if hours > 40:
    pay = hours * rate + (rate*1.5)
    print(pay)
else:
    pay = hours * rate
    print(pay)
 
 
2. A certain CS professor gives five-point quizzes that are graded on the scale
5-A, 4-B, 3-C, 2-D, 1-F, 0-F. Write a program that accepts a quiz score as an
input and uses a decision structure to calculate the corresponding grade.

score = eval(input("What score did you get?:"))

if score == 5:
    print("A")
    
elif score == 4:
    print("B")
elif score ==3:
    print("C")
elif score ==2:
    print ("D")
elif score <= 1:
    print("F")
else:
    print("Idk what you typed")
    

3. A certain CS professor gives 100-point exams that are graded on the scale
90-100:A, 80-89:B, 70-79:C, 60-69:0, <60:F. Write a program that accepts an exam score as input and uses a decision structure to calculate the
corresponding grade.
score = eval(input("What score did you get?:"))

if score >= 90:
    print("A")
    
elif score >= 80 and score <90:
    print("B")
elif score >= 70 and score < 80:
    print("C")
elif score >= 60 and score < 70:
    print ("D")
elif score < 60:
    print("F")
else:
    print("Idk what you typed")

4. A certain college classifies students according to credits earned. A student
with less than 7 credits is a Freshman. At least 7 credits are required to be
a Sophomore, 16 to be a Junior and 26 to be classified as a Senior. Write a
program that calculates class standing from the number of credits earned.
credits= eval(input("How many credits do you have?:"))

if credits >7:
    print("Freshman")
    
elif credits >=7 and credits < 16:
    print("Sophomore")
elif credits >=16 and credits < 26:
    print("Junior")
elif credits >= 26:
    print ("Senior")
else:
    print("Do you even go here?")
    

5. The body mass index (BMI) is calculated as a person's weight (in pounds)
times 720, divided by the square of the person's height (in inches). A BMI
in the range 19-25, inclusive, is considered healthy. Write a program that
calculates a person's BMI and prints a message telling whether they are
above, within, or below the healthy range.

height = eval(input("How tall are you in inches?: "))
weight = eval(input("How much do you weigh in lbs?: "))

bmi = (weight * 720)/(height **2)

if bmi >=19 and bmi <=25:
    print("Healthy")
elif bmi <19:
    print("Underweight")
else:
    print("Overweight")

6. The speeding ticket fine policy in Podunksville is $50 plus $5 for each mph
over the limit plus a penalty of $200 for any speed over 90 mph. Write a
program that accepts a speed limit and a clocked speed and either prints
a message indicating the speed was legal or prints the amount of the fine,
if the speed is illegal.


7. A babysitter charges $2.50 an hour until 9:00 PM when the rate drops to
$1.75 an hour (the children are in bed). Write a program that accepts a
starting time and ending time in hours and minutes and calculates the total
babysitting bill. You may assume that the starting and ending times are in
a single 24-hour period. Partial hours should be appropriately prorated.
8. A person is eligible to be a US senator if they are at least 30 years old
and have been a US citizen for at least 9 years. To be a US representative
these numbers are 25 and 7, respectively. Write a program that accepts a
person's age and years of citizenship as input and outputs their eligibility
for the Senate and House.
9. A formula for computing Easter in the years 1982-2048, inclusive, is as
follows: let a = year%19, b = year%4, c = year%7, d = (19a + 24)%30,
e = (2b + 4c + 6d + 5)%7. The date of Easter is March 22 + d + e (which 
could be in April). Write a program that inputs a year, verifies that it is in
the proper range, and then prints out the date of Easter that year.
10. The formula for Easter in the previous problem works for every year in
the range 1900-2099 except for 1954, 1981, 2049, and 2076. For these
4 years it produces a date that is one week too late. Modify the above
program to work for the entire range 1900-2099.
11. A year is a leap year if it is divisible by 4, unless it is a century year that is
not divisible by 400. (1800 and 1900 are not leap years while 1600 and
2000 are.) Write a program that calculates whether a year is a leap year.
12. Write a program that accepts a date in the form month! day /year and outputs whether or not the date is valid. For example 5/24/1962 is valid, but
9/31/2000 is not. (September has only 30 days.)
13. The days of the year are often numbered from 1 through 365 (or 366).
This number can be computed in three steps using int arithmetic:
(a) dayNum = 31(month - 1) +day
(b) if the month is after February subtract (4(month) + 23)/ /10
(c) if it's a leap year and after February 29, add 1
Write a program that accepts a date as month/ day /year, verifies that it is a
valid date (see previous problem), and then calculates the corresponding
day number.
14. Do Programming Exercise 7 from Chapter 4, but add a decision to handle
the case where the line does not intersect the circle.
15. Do Programming Exercise 8 from Chapter 4, but add a decision to prevent
the program from dividing by zero if the line is vertical.
16. Archery Scorer. Write a program that draws an archery target (see Programming Exercise 2 from Chapter 4) and allows the user to click five
times to represent arrows shot at the target. Using five-band scoring, a
bulls-eye (yellow) is worth 9 points and each successive ring is worth 2
fewer points down to 1 for white. The program should output a score for
each click and keep track of a running sum for the entire series.  
17. Write a program to animate a circle bouncing around a window. The basic
idea is to start the circle somewhere in the interior of the window. Use
variables dx and dy (both initialized to 1) to control the movement of the
circle. Use a large counted loop (say 10000 iterations), and each time
through the loop move the circle using dx and dy . When the x-value of the
center of the circle gets too high (it hits the edge), change dx to -1. When
it gets too low, change dx back to 1. Use a similar approach for dy .
Note: Your animation will probably run too fast. You can slow it down
by using update from the graphics library with a rate parameters. For
example, this loop will be limited to going around at a rate of 30 times per
second:
for i in range ( 10000) :
•••
241
update (30) # pause so rate is not more than 30 times a second
18. Take a favorite programming problem from a previous chapter and add
decisions and/ or exception handling as required to make it truly robust
(will not crash on any inputs). Trade your program with a friend and have
a contest to see who can ''break" the other's program. 
 
 
 
 
 
 
 

