TRUE FALSE
--------------------------------

1. A Python while implements a definite loop.
 - F infinite loop
 
2. The counted loop pattern uses a definite loop.
 - T
 
3. A sentinel loop asks the user whether to continue on each iteration.
 - F continues until trigger is reach
 
4. A sentinel loop should not actually process the sentinel value.
 - T - unless you want it to end
 
5. The easiest way to iterate through the lines of a file in Python is to use a
while loop.
 - F - use whatver is best for your code
 
6. A while is a post-test loop.
 - F - python doesn't have a post test
 
7. The Boolean operator or returns True when both of its operands are true.
 - T

8. a and (b or c) == (a and b) or (a and c)
 - T
 
9. not(a or b) -- (not a) or not(b)
  - F
 
10. True or False
- T?


----------------------
Multiple Choice
--------------------------


1. A loop pattern that asks the user whether to continue on each iteration is
called a(n)
A- Interactive 

2. A loop pattern that continues until a special value is input is called a(n)
C- Sentinel Loop 

3. A loop structure that tests the loop condition after executing the loop body
is called a
D? But python doesn't have a post loop so maybe C, loop and a half


4. A priming read is part of the pattern for a(n)
C- Sentinel Loop

5. What statement can be executed in the body of a loop to cause it to terminate?
C- Break 


6. Which of the following is not a valid rule of Boolean algebra?
a) (True or x) == True -
b) (False and x) == False
c) not(a and b)== not(a) and not(b) - X?
d) (True or False) == True

7. A loop that never terminates is called
D- Infinite 

8. Which line would not be found in a truth table for and?
C- TFT

9. Which line would not be found in a truth table for or?
C - FTF

10. The term for an operator that may not evaluate one of its subexpressions
A- Short Circuit


-------------------
DISCUSSION
-------------------

1. Compare and contrast the following pairs of terms:
a) definite loop vs. indefinite loop - for vs while, forever or error
b) for loop vs. while loop - same as definite and indefinite
c) interactive loop vs. sentinel loop - interactive checks you stepwise vs sentinel goes until a trigger
d) sentinel loop vs. end -of-file loop - sentinel loop has a trigger, end of file is just .eof


2. Give a truth table that shows the Boolean value of each of the following Boolean expressions, for every possible combination of "input" values.
Hint: Including columns for intermediate expressions is helpful.
a) not (P and Q) F and T
b) (not P) and Q F and T
c) (not P) or (not Q) F and F
d) (P and Q) or R adsfad
e) (P or R) and (Q or R)


3. Write a while loop fragment that calculates the following values:
a) Sum of the first n counting numbers: 1 + 2 + 3 + ... + n
def main():
    num = eval(input("Enter a number: "))
    total = 0
    for i in range(num+1):
        total = total + i
    print(total)

main()

b) Sum of the first n odd numbers: 1 + 3 + 5 + ... + 2n - 1

def main():
    num = eval(input("Enter a number: "))
    total = 0
    for i in range(num+1):
        if i%2 !=0:
            total = total + i
    print(total)

main()

c) Sum of a series of numbers entered by the user until the value 999 is
entered. Note: 999 should not be part of the sum.
def main():
    num = eval(input("Enter a number: "))
    total = 0
    for i in range(num+1):
        if num != 999:
            total = total + i
        else:
            print("Number invalid")
            break
    print(total)

main()

d) The number of times a whole number n can be divided by 2 (using
integer division) before reaching 1 (i.e., log2n).
def main():
    num = eval(input("Enter a number: "))
    count = 0
    while num >1: 
        num = num/2
        count = count +1
    print("It took:", count, "times to go to 1 or 0")

main()


---------------------------
PROGRAMMING EXERCISES
---------------------------


1. The Fibonacci sequence starts 1, 1, 2, 3, 5, 8, .. . . Each number in the sequence (after the first two) is the sum of the previous two. 
Write a program that computes and outputs the nth Fibonacci number, where n is a
value entered by the user.
fibo = 1 #cannot be 0 or else the answer will default to 0
prev = 1 

n = eval(input("Enter a series of numbers, enter 0 or a negative to quit: "))
    #range 2 is essential because it takes the two numbers
for i in range(2,n):
    temp = prev
    prev = fibo
    fibo = temp + fibo
print(fibo)

2. The National Weather Service computes the windchill index using the following formula:
35.74 + 0.6 215T - 35.75(V0·16) + 0.4 275T(V0·16)
Where T is the temperature in degrees Fahrenheit, and V is the wind speed
in miles per hour.
Write a program that prints a nicely formatted table of windchill values. Rows should represent wind speed for 0 to 50 in 5-mph increments,
and the columns represent temperatures from -20 to +60 in 10-degree increments. Note: The formula only applies for wind speeds in excess of 3
miles per hour.

t = eval(input("What is the temperature(F): "))
w = eval(input("What is the windspeed(mph): "))

winchill = 35.74 + 0.6215*t - 35.75*(v**0.16)+ 0.4275*t*(V**0.16)

3. Write a program that uses a while loop to determine how long it takes
for an investment to double at a given interest rate. The input will be an
annualized interest rate, and the output is the number of years it takes an
investment to double. Note: The amount of the initial investment does not
matter; you can use $1. 
def main():
    investment = 1000 #initial investment
    rate = input("Please enter the applicable interest rate: ") #interest rate input
    years = 0 #sets years to zero
    value = investment
 
while value <= investment*2: #defines loop sentinel
    value = value + value*((float(rate)/100)) #calculates investment
    years = years + 1 #adds a year for every loop

main()


4. The Syracuse (also called "Collatz" or "Hailstone") sequence is generated
by starting with a natural number and repeatedly applying the following
function until reaching 1:
{ x/ 2 if x is even
syr(x) = 3x + 1 if x is odd
For example, the Syracuse sequence starting with 5 is: 5, 16, 8, 4, 2, 1. It is
an open question in mathematics whether this sequence will always go to
1 for every possible starting value.
Write a program that gets a starting value from the user and then prints
the Syracuse sequence for that starting value.
5. A positive whole number n > 2 is prime if no number between 2 and .Jii
(inclusive) evenly divides n. Write a program that accepts a value of n as
input and determines if the value is prime. If n is not prime, your program
should quit as soon as it finds a value that evenly divides n.
6. Modify the previous program to find every prime number less than or equal
to n.
7. The Goldbach conjecture asserts that every even number is the sum of two
prime numbers. Write a program that gets a number from the user, checks
to make sure that it is even, and then finds two prime numbers that add
up to the number.
8. The greatest common divisor (GCD) of two values can be computed using
Euclid's algorithm. Starting with the values m and n, we repeatedly apply
the formula: n, m = m, ni'.m until m is 0. At that point, n is the GCD of
the original m and n. Write a program that finds the GCD of two numbers
using this algorithm.
9. Write a program that computes the fuel efficiency of a multi-leg journey.
The program will first prompt for the starting odometer reading and then
get information about a series of legs. For each leg, the user enters the
current odometer reading and the amount of gas used (separated by a
space). The user signals the end of the trip with a blank line. The program
should print out the miles per gallon achieved on each leg and the total
MPG for the trip.
10. Modify the previous program to get its input from a file.
11. Heating and cooling degree days are measures used by utility companies
to estimate energy requirements. If the average temperature for a day is
below 60, then the number of degrees below 60 is added to the heating
degree days. If the temperature is above 80, the amount over 80 is added
to the cooling degree days. Write a program that accepts a sequence of
average daily temperatures and computes the running total of cooling and
heating degree days. The program should print these two totals after all
the data has been processed.
12. Modify the previous program to get its input from a file.
13. Write a program that graphically plots a regression line-that is, the line
with the best fit through a collection of points. First ask the user to specify
the data points by clicking on them in a graphics window. To find the end
of input, place a small rectangle labeled "Done" in the lower-left comer of
the window; the program will stop gathering points when the user clicks
inside that rectangle.
The regression line is the line with the following equation:
y=y + m(x - x)
where
L XiYi - nxy
m = ------==--------:--
L x - nx2
x is the mean of the x-values, y is the mean of the y-values, and n is the
number of points.
As the user clicks on points, the program should draw them in the
graphics window and keep track of the count of input values and the running sum of x, y, x2, and xy values. When the user clicks inside the "Done"
rectangle, the program then computes the value of y (using the equations
above) corresponding to the x values at the left and right edges of the
window to compute the endpoints of the regression line spanning the window. Mer the line is drawn, the program will pause for another mouse
click before closing the window and quitting.
14. Write a program that converts a color image to grayscale. The user supplies the name of a file containing a GIF or PPM image, and the program
loads the image and displays the file. At the click of the mouse, the program converts the image to grayscale. The user is then prompted for a file
name to store the grayscale image in. 
You will probably want to go back and review the Image object from
the graphics libarary (Section 4.8.4). The basic idea for converting the image is to go through it pixel by pixel and convert each one from color to an
appropriate shade of gray. A gray pixel is created by setting its red, green,
and blue components to have the same brightness. So color _rgb ( 0, 0, 0)
is black, color _rgb (255, 255, 255) is white, and color _rgb ( 127, 127, 127)
is a gray "halfway'' between. You should use a weighted average of the
original RGB values to determine the brightness of the gray. Here is the
pseudocode for the grayscale algorithm:
for each row in the image :
for each col11mn in the image :
r, g, b = get pixel information for current row and column
brightness = int(round(0.299r + 0.587g + 0.1 14b))
set pixel to color_rgb(brightness, brightness, brightness)
update the image # to see progress row by row
Note: The pixel operations in the Image class are rather slow, so you
will want to use relatively small images (not 12 megapixels) to test your
program.
15. Write a program to convert an image to its color negative. The general
form of the program will be similar to that of the previous problem. The
negative of a pixel is formed by subtracting each color value from 255. So
the new pixel color is color _rgb (255-r, 255-g, 255-b).
16. Modify the event_loop3 program to use the <Esc> key as described in the
text. When the user types into an Entry box, hitting <Esc> should cause
the Entry to disappear and discard whatever text may have been typed in
the box. 
